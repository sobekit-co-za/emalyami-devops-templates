name: Deploy Angular to Production

on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      deploy_path:
        required: true
        type: string
      node_version:
        required: false
        type: string
        default: '18'
      build_command:
        required: false
        type: string
        default: 'npm run build'
      dist_folder:
        required: false
        type: string
        default: 'dist'
    secrets:
      VAULT_ADDR:
        required: true
      VAULT_ROLE_ID:
        required: true
      VAULT_SECRET_ID:
        required: true

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Angular application
        run: ${{ inputs.build_command }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: angular-build
          path: ${{ inputs.dist_folder }}
          retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        server:
          - { ip: 102.130.120.173, name: serv5 }
          - { ip: 102.218.215.254, name: serv6 }
      max-parallel: 1

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: angular-build
          path: build

      - name: Import secrets from Vault
        uses: hashicorp/vault-action@v3
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secret/data/ci/emalyami/ssh private_key | SSH_PRIVATE_KEY ;
            secret/data/ci/emalyami/ssh known_hosts | SSH_KNOWN_HOSTS

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts

      - name: Deploy to ${{ matrix.server.name }}
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ema-deploy@${{ matrix.server.ip }} \
            "sudo mkdir -p ${{ inputs.deploy_path }} && sudo chown -R ema-deploy:ema-deploy ${{ inputs.deploy_path }}"

          ssh -i ~/.ssh/deploy_key ema-deploy@${{ matrix.server.ip }} \
            "[ -d ${{ inputs.deploy_path }}_backup ] && rm -rf ${{ inputs.deploy_path }}_backup || true"

          ssh -i ~/.ssh/deploy_key ema-deploy@${{ matrix.server.ip }} \
            "[ -d ${{ inputs.deploy_path }} ] && cp -r ${{ inputs.deploy_path }} ${{ inputs.deploy_path }}_backup || true"

          rsync -avz --delete -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" \
            build/ ema-deploy@${{ matrix.server.ip }}:${{ inputs.deploy_path }}/

          ssh -i ~/.ssh/deploy_key ema-deploy@${{ matrix.server.ip }} \
            "sudo chown -R www-data:www-data ${{ inputs.deploy_path }}"

      - name: Health check on ${{ matrix.server.name }}
        run: |
          sleep 5
          response=$(ssh -i ~/.ssh/deploy_key ema-deploy@${{ matrix.server.ip }} \
            "curl -s -o /dev/null -w '%{http_code}' http://localhost/${{ inputs.app_name }}/" || echo "000")
          if [ "$response" = "200" ] || [ "$response" = "301" ] || [ "$response" = "302" ]; then
            echo "✓ ${{ matrix.server.name }} healthy (HTTP $response)"
          else
            echo "✗ ${{ matrix.server.name }} unhealthy (HTTP $response)"
            exit 1
          fi
